#ifndef TYPES_HPP
#define TYPES_HPP

#include "hpc_helpers/all_helpers.cuh"

#include <array>
#include <string>

namespace cudasw4{
    
struct HitResult {
    int queryId{};
    std::string queryHeader{};
    int queryLength{};
    std::string querySequence{};
    std::string subjectHeader{};
    int subjectLength{};
    std::string subjectSequence{};
    int score{};
    std::vector<std::pair<int, int>> alignment{};
    bool reversed = false;
    HitResult() = default;
    HitResult(
        int queryId_,
        const std::string& queryHeader_, 
        int queryLength_,
        const std::string& querySequence_, 
        const std::string& subjectHeader_, 
        int subjectLength_,
        const std::string& subjectSequence_, 
        int score_
    ): 
        queryId(queryId_),
        queryHeader(queryHeader_), 
        queryLength(queryLength_), 
        querySequence(querySequence_), 
        subjectHeader(subjectHeader_), 
        subjectLength(subjectLength_), 
        subjectSequence(subjectSequence_), 
        score(score_) 
    {};
    std::string getSacc() {
        return subjectHeader;
    }
    int getSlen() {
        return subjectLength;
    }
    int getScore() {
        return score;
    }
    int getQstart() {
        return alignment[0].first;
    }
    int getQend() {
        return alignment.back().first;
    }
    int getSstart() {
        return alignment[0].second;
    }
    int getSend() {
        return alignment.back().second;
    }
};

enum class SequenceType {
    Nucleotide,
    Protein
};

enum class KernelType{
    Half2,
    DPXs16,
    DPXs32,
    Float
};

enum class SubMatrixType{
    DNA,
    NUC44,
    PAM30,
    PAM70,
    BLOSUM45,
    BLOSUM50,
    BLOSUM62,
    BLOSUM80,
    PAM30_20,
    PAM70_20,
    BLOSUM45_20,
    BLOSUM50_20,
    BLOSUM62_20,
    BLOSUM80_20,
};

struct PAM30_20 {
    static constexpr char low = -17;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        //      A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    *
        /*A*/   6,  -7,  -4,  -3,  -6,  -4,  -2,  -2,  -7,  -5,  -6,  -7,  -5,  -8,  -2,   0,  -1, -13,  -8,  -2, -17,
        /*R*/  -7,   8,  -6, -10,  -8,  -2,  -9,  -9,  -2,  -5,  -8,   0,  -4,  -9,  -4,  -3,  -6,  -2, -10,  -8, -17,
        /*N*/  -4,  -6,   8,   2, -11,  -3,  -2,  -3,   0,  -5,  -7,  -1,  -9,  -9,  -6,   0,  -2,  -8,  -4,  -8, -17,
        /*D*/  -3, -10,   2,   8, -14,  -2,   2,  -3,  -4,  -7, -12,  -4, -11, -15,  -8,  -4,  -5, -15, -11,  -8, -17,
        /*C*/  -6,  -8, -11, -14,  10, -14, -14,  -9,  -7,  -6, -15, -14, -13, -13,  -8,  -3,  -8, -15,  -4,  -6, -17,
        /*Q*/  -4,  -2,  -3,  -2, -14,   8,   1,  -7,   1,  -8,  -5,  -3,  -4, -13,  -3,  -5,  -5, -13, -12,  -7, -17,
        /*E*/  -2,  -9,  -2,   2, -14,   1,   8,  -4,  -5,  -5,  -9,  -4,  -7, -14,  -5,  -4,  -6, -17,  -8,  -6, -17,
        /*G*/  -2,  -9,  -3,  -3,  -9,  -7,  -4,   6,  -9, -11, -10,  -7,  -8,  -9,  -6,  -2,  -6, -15, -14,  -5, -17,
        /*H*/  -7,  -2,   0,  -4,  -7,   1,  -5,  -9,   9,  -9,  -6,  -6, -10,  -6,  -4,  -6,  -7,  -7,  -3,  -6, -17,
        /*I*/  -5,  -5,  -5,  -7,  -6,  -8,  -5, -11,  -9,   8,  -1,  -6,  -1,  -2,  -8,  -7,  -2, -14,  -6,   2, -17,
        /*L*/  -6,  -8,  -7, -12, -15,  -5,  -9, -10,  -6,  -1,   7,  -8,   1,  -3,  -7,  -8,  -7,  -6,  -7,  -2, -17,
        /*K*/  -7,   0,  -1,  -4, -14,  -3,  -4,  -7,  -6,  -6,  -8,   7,  -2, -14,  -6,  -4,  -3, -12,  -9,  -9, -17,
        /*M*/  -5,  -4,  -9, -11, -13,  -4,  -7,  -8, -10,  -1,   1,  -2,  11,  -4,  -8,  -5,  -4, -13, -11,  -1, -17,
        /*F*/  -8,  -9,  -9, -15, -13, -13, -14,  -9,  -6,  -2,  -3, -14,  -4,   9, -10,  -6,  -9,  -4,   2,  -8, -17,
        /*P*/  -2,  -4,  -6,  -8,  -8,  -3,  -5,  -6,  -4,  -8,  -7,  -6,  -8, -10,   8,  -2,  -4, -14, -13,  -6, -17,
        /*S*/   0,  -3,   0,  -4,  -3,  -5,  -4,  -2,  -6,  -7,  -8,  -4,  -5,  -6,  -2,   6,   0,  -5,  -7,  -6, -17,
        /*T*/  -1,  -6,  -2,  -5,  -8,  -5,  -6,  -6,  -7,  -2,  -7,  -3,  -4,  -9,  -4,   0,   7, -13,  -6,  -3, -17,
        /*W*/ -13,  -2,  -8, -15, -15, -13, -17, -15,  -7, -14,  -6, -12, -13,  -4, -14,  -5, -13,  13,  -5, -15, -17,
        /*Y*/  -8, -10,  -4, -11,  -4, -12,  -8, -14,  -3,  -6,  -7,  -9, -11,   2, -13,  -7,  -6,  -5,  10,  -7, -17,
        /*V*/  -2,  -8,  -8,  -8,  -6,  -7,  -6,  -5,  -6,   2,  -2,  -9,  -1,  -8,  -6,  -6,  -3, -15,  -7,   7, -17,
        /***/ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = PAM30_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = PAM30_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct PAM70_20{
    static constexpr char low = -11;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        //       A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    *
        /*A*/    5,  -4,  -2,  -1,  -4,  -2,  -1,   0,  -4,  -2,  -4,  -4,  -3,  -6,   0,   1,   1,  -9,  -5,  -1, -11,
        /*R*/   -4,   8,  -3,  -6,  -5,   0,  -5,  -6,   0,  -3,  -6,   2,  -2,  -7,  -2,  -1,  -4,   0,  -7,  -5, -11,
        /*N*/   -2,  -3,   6,   3,  -7,  -1,   0,  -1,   1,  -3,  -5,   0,  -5,  -6,  -3,   1,   0,  -6,  -3,  -5, -11,
        /*D*/   -1,  -6,   3,   6,  -9,   0,   3,  -1,  -1,  -5,  -8,  -2,  -7, -10,  -4,  -1,  -2, -10,  -7,  -5, -11,
        /*C*/   -4,  -5,  -7,  -9,   9,  -9,  -9,  -6,  -5,  -4, -10,  -9,  -9,  -8,  -5,  -1,  -5, -11,  -2,  -4, -11,
        /*Q*/   -2,   0,  -1,   0,  -9,   7,   2,  -4,   2,  -5,  -3,  -1,  -2,  -9,  -1,  -3,  -3,  -8,  -8,  -4, -11,
        /*E*/   -1,  -5,   0,   3,  -9,   2,   6,  -2,  -2,  -4,  -6,  -2,  -4,  -9,  -3,  -2,  -3, -11,  -6,  -4, -11,
        /*G*/    0,  -6,  -1,  -1,  -6,  -4,  -2,   6,  -6,  -6,  -7,  -5,  -6,  -7,  -3,   0,  -3, -10,  -9,  -3, -11,
        /*H*/   -4,   0,   1,  -1,  -5,   2,  -2,  -6,   8,  -6,  -4,  -3,  -6,  -4,  -2,  -3,  -4,  -5,  -1,  -4, -11,
        /*I*/   -2,  -3,  -3,  -5,  -4,  -5,  -4,  -6,  -6,   7,   1,  -4,   1,   0,  -5,  -4,  -1,  -9,  -4,   3, -11,
        /*L*/   -4,  -6,  -5,  -8, -10,  -3,  -6,  -7,  -4,   1,   6,  -5,   2,  -1,  -5,  -6,  -4,  -4,  -4,   0, -11,
        /*K*/   -4,   2,   0,  -2,  -9,  -1,  -2,  -5,  -3,  -4,  -5,   6,   0,  -9,  -4,  -2,  -1,  -7,  -7,  -6, -11,
        /*M*/   -3,  -2,  -5,  -7,  -9,  -2,  -4,  -6,  -6,   1,   2,   0,  10,  -2,  -5,  -3,  -2,  -8,  -7,   0, -11,
        /*F*/   -6,  -7,  -6, -10,  -8,  -9,  -9,  -7,  -4,   0,  -1,  -9,  -2,   8,  -7,  -4,  -6,  -2,   4,  -5, -11,
        /*P*/    0,  -2,  -3,  -4,  -5,  -1,  -3,  -3,  -2,  -5,  -5,  -4,  -5,  -7,   7,   0,  -2,  -9,  -9,  -3, -11,
        /*S*/    1,  -1,   1,  -1,  -1,  -3,  -2,   0,  -3,  -4,  -6,  -2,  -3,  -4,   0,   5,   2,  -3,  -5,  -3, -11,
        /*T*/    1,  -4,   0,  -2,  -5,  -3,  -3,  -3,  -4,  -1,  -4,  -1,  -2,  -6,  -2,   2,   6,  -8,  -4,  -1, -11,
        /*W*/   -9,   0,  -6, -10, -11,  -8, -11, -10,  -5,  -9,  -4,  -7,  -8,  -2,  -9,  -3,  -8,  13,  -3, -10, -11,
        /*Y*/   -5,  -7,  -3,  -7,  -2,  -8,  -6,  -9,  -1,  -4,  -4,  -7,  -7,   4,  -9,  -5,  -4,  -3,   9,  -5, -11,
        /*V*/   -1,  -5,  -5,  -5,  -4,  -4,  -4,  -3,  -4,   3,   0,  -6,   0,  -5,  -3,  -3,  -1, -10,  -5,   6, -11,
        /***/  -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = PAM70_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = PAM70_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM45_20{
    static constexpr char low = -5;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
            //A, R, N, D, C, Q, E, G, H, I, L, K, M, F, P, S, T, W, Y, V, other
            5, -2, -1, -2, -1, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -2, -2, 0, low,
            -2, 7, 0, -1, -3, 1, 0, -2, 0, -3, -2, 3, -1, -2, -2, -1, -1, -2, -1, -2, low,
            -1, 0, 6, 2, -2, 0, 0, 0, 1, -2, -3, 0, -2, -2, -2, 1, 0, -4, -2, -3, low,
            -2, -1, 2, 7, -3, 0, 2, -1, 0, -4, -3, 0, -3, -4, -1, 0, -1, -4, -2, -3, low,
            -1, -3, -2, -3, 12, -3, -3, -3, -3, -3, -2, -3, -2, -2, -4, -1, -1, -5, -3, -1, low,
            -1, 1, 0, 0, -3, 6, 2, -2, 1, -2, -2, 1, 0, -4, -1, 0, -1, -2, -1, -3, low,
            -1, 0, 0, 2, -3, 2, 6, -2, 0, -3, -2, 1, -2, -3, 0, 0, -1, -3, -2, -3, low,
            0, -2, 0, -1, -3, -2, -2, 7, -2, -4, -3, -2, -2, -3, -2, 0, -2, -2, -3, -3, low,
            -2, 0, 1, 0, -3, 1, 0, -2, 10, -3, -2, -1, 0, -2, -2, -1, -2, -3, 2, -3, low,
            -1, -3, -2, -4, -3, -2, -3, -4, -3, 5, 2, -3, 2, 0, -2, -2, -1, -2, 0, 3, low,
            -1, -2, -3, -3, -2, -2, -2, -3, -2, 2, 5, -3, 2, 1, -3, -3, -1, -2, 0, 1, low,
            -1, 3, 0, 0, -3, 1, 1, -2, -1, -3, -3, 5, -1, -3, -1, -1, -1, -2, -1, -2, low,
            -1, -1, -2, -3, -2, 0, -2, -2, 0, 2, 2, -1, 6, 0, -2, -2, -1, -2, 0, 1, low,
            -2, -2, -2, -4, -2, -4, -3, -3, -2, 0, 1, -3, 0, 8, -3, -2, -1, 1, 3, 0, low,
            -1, -2, -2, -1, -4, -1, 0, -2, -2, -2, -3, -1, -2, -3, 9, -1, -1, -3, -3, -3, low,
            1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -3, -1, -2, -2, -1, 4, 2, -4, -2, -1, low,
            0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, 2, 5, -3, -1, 0, low,
            -2, -2, -4, -4, -5, -2, -3, -2, -3, -2, -2, -2, -2, 1, -3, -4, -3, 15, 3, -3, low,
            -2, -1, -2, -2, -3, -1, -2, -3, 2, 0, 0, -1, 0, 3, -3, -2, -1, 3, 8, -1, low,
            0, -2, -3, -3, -1, -3, -3, -3, -3, 3, 1, -2, 1, 0, -3, -1, 0, -3, -1, 5, low,
            low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM45_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM45_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM50_20{
    static constexpr char low = -5;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
            // A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V, other
            5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -2, -1, -1, -3, -1,  1,  0, -3, -2,  0, low,
            -2,  7, -1, -2, -4,  1,  0, -3,  0, -4, -3,  3, -2, -3, -3, -1, -1, -3, -1, -3, low,
            -1, -1,  7,  2, -2,  0,  0,  0,  1, -3, -4,  0, -2, -4, -2,  1,  0, -4, -2, -3, low,
            -2, -2,  2,  8, -4,  0,  2, -1, -1, -4, -4, -1, -4, -5, -1,  0, -1, -5, -3, -4, low,
            -1, -4, -2, -4, 13, -3, -3, -3, -3, -2, -2, -3, -2, -2, -4, -1, -1, -5, -3, -1, low,
            -1,  1,  0,  0, -3,  7,  2, -2,  1, -3, -2,  2,  0, -4, -1,  0, -1, -1, -1, -3 , low,
            -1,  0,  0,  2, -3,  2,  6, -3,  0, -4, -3,  1, -2, -3, -1, -1, -1, -3, -2, -3 , low,
            0, -3,  0, -1, -3, -2, -3,  8, -2, -4, -4, -2, -3, -4, -2,  0, -2, -3, -3, -4 , low,
            -2,  0,  1, -1, -3,  1,  0, -2, 10, -4, -3,  0, -1, -1, -2, -1, -2, -3,  2, -4 , low,
            -1, -4, -3, -4, -2, -3, -4, -4, -4,  5,  2, -3,  2,  0, -3, -3, -1, -3, -1,  4 , low,
            -2, -3, -4, -4, -2, -2, -3, -4, -3,  2,  5, -3,  3,  1, -4, -3, -1, -2, -1,  1 , low,
            -1,  3,  0, -1, -3,  2,  1, -2,  0, -3, -3,  6, -2, -4, -1,  0, -1, -3, -2, -3 , low,
            -1, -2, -2, -4, -2,  0, -2, -3, -1,  2,  3, -2,  7,  0, -3, -2, -1, -1,  0,  1 , low,
            -3, -3, -4, -5, -2, -4, -3, -4, -1,  0,  1, -4,  0,  8, -4, -3, -2,  1,  4, -1 , low,
            -1, -3, -2, -1, -4, -1, -1, -2, -2, -3, -4, -1, -3, -4, 10, -1, -1, -4, -3, -3 , low,
            1, -1,  1,  0, -1,  0, -1,  0, -1, -3, -3,  0, -2, -3, -1,  5,  2, -4, -2, -2 , low,
            0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  2,  5, -3, -2,  0 , low,
            -3, -3, -4, -5, -5, -1, -3, -3, -3, -3, -2, -3, -1,  1, -4, -4, -3, 15,  2, -3, low,
            -2, -1, -2, -3, -3, -1, -2, -3,  2, -1, -1, -2,  0,  4, -3, -2, -2,  2,  8, -1 , low,
            0, -3, -3, -4, -1, -3, -3, -4, -4,  4,  1, -3,  1, -1, -3, -2,  0, -3, -1,  5, low,
            low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM50_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM50_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM62_20{
    static constexpr char low = -4;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
         // A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V, other
            4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, low, // A
            -1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, low,// R
            -2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3, low,// N
            -2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3, low,// D
            0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, low,// C
            -1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2, low,// Q
            -1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2, low,// E
            0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, low,// G
            -2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3, low,// H
            -1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, low,// I
            -1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, low,// L
            -1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2, low,// K
            -1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, low,// M
            -2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, low,// F
            -1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, low,// P
            1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2, low,// S
            0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, low,// T
            -3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, low,// W
            -2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, low,// Y
            0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, low,// V
            low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM62_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM62_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM80_20{
    static constexpr char low = -6;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
            //A, R, N, D, C, Q, E, G, H, I, L, K, M, F, P, S, T, W, Y, V, other
            5, -2, -2, -2, -1, -1, -1, 0, -2, -2, -2, -1, -1, -3, -1, 1, 0, -3, -2, 0, low,
            -2, 6, -1, -2, -4, 1, -1, -3, 0, -3, -3, 2, -2, -4, -2, -1, -1, -4, -3, -3, low,
            -2, -1, 6, 1, -3, 0, -1, -1, 0, -4, -4, 0, -3, -4, -3, 0, 0, -4, -3, -4, low,
            -2, -2, 1, 6, -4, -1, 1, -2, -2, -4, -5, -1, -4, -4, -2, -1, -1, -6, -4, -4, low,
            -1, -4, -3, -4, 9, -4, -5, -4, -4, -2, -2, -4, -2, -3, -4, -2, -1, -3, -3, -1, low,
            -1, 1, 0, -1, -4, 6, 2, -2, 1, -3, -3, 1, 0, -4, -2, 0, -1, -3, -2, -3, low,
            -1, -1, -1, 1, -5, 2, 6, -3, 0, -4, -4, 1, -2, -4, -2, 0, -1, -4, -3, -3, low,
            0, -3, -1, -2, -4, -2, -3, 6, -3, -5, -4, -2, -4, -4, -3, -1, -2, -4, -4, -4, low,
            -2, 0, 0, -2, -4, 1, 0, -3, 8, -4, -3, -1, -2, -2, -3, -1, -2, -3, 2, -4, low,
            -2, -3, -4, -4, -2, -3, -4, -5, -4, 5, 1, -3, 1, -1, -4, -3, -1, -3, -2, 3, low,
            -2, -3, -4, -5, -2, -3, -4, -4, -3, 1, 4, -3, 2, 0, -3, -3, -2, -2, -2, 1, low,
            -1, 2, 0, -1, -4, 1, 1, -2, -1, -3, -3, 5, -2, -4, -1, -1, -1, -4, -3, -3, low,
            -1, -2, -3, -4, -2, 0, -2, -4, -2, 1, 2, -2, 6, 0, -3, -2, -1, -2, -2, 1, low,
            -3, -4, -4, -4, -3, -4, -4, -4, -2, -1, 0, -4, 0, 6, -4, -3, -2, 0, 3, -1, low,
            -1, -2, -3, -2, -4, -2, -2, -3, -3, -4, -3, -1, -3, -4, 8, -1, -2, -5, -4, -3, low,
            1, -1, 0, -1, -2, 0, 0, -1, -1, -3, -3, -1, -2, -3, -1, 5, 1, -4, -2, -2, low,
            0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -2, -1, -1, -2, -2, 1, 5, -4, -2, 0, low,
            -3, -4, -4, -6, -3, -3, -4, -4, -3, -3, -2, -4, -2, 0, -5, -4, -4, 11, 2, -3, low,
            -2, -3, -3, -4, -3, -2, -3, -4, 2, -2, -2, -3, -2, 3, -4, -2, -2, 2, 7, -2, low,
            0, -3, -4, -4, -1, -3, -3, -4, -4, 3, 1, -3, 1, -1, -3, -2, 0, -3, -2, 4, low,
            low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low, low,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM80_20::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM80_20::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct PAM30{
    static constexpr char low = -17;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/PAM30
        // Entries for the PAM30 matrix at a scale of ln(2)/2.0,.
        //      A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X    *
        /*A*/   6,  -7,  -4,  -3,  -6,  -4,  -2,  -2,  -7,  -5,  -6,  -7,  -5,  -8,  -2,   0,  -1, -13,  -8,  -2,  -3,  -6,  -3,  -1, -17,
        /*R*/  -7,   8,  -6, -10,  -8,  -2,  -9,  -9,  -2,  -5,  -8,   0,  -4,  -9,  -4,  -3,  -6,  -2, -10,  -8,  -7,  -7,  -4,  -1, -17,
        /*N*/  -4,  -6,   8,   2, -11,  -3,  -2,  -3,   0,  -5,  -7,  -1,  -9,  -9,  -6,   0,  -2,  -8,  -4,  -8,   6,  -6,  -3,  -1, -17,
        /*D*/  -3, -10,   2,   8, -14,  -2,   2,  -3,  -4,  -7, -12,  -4, -11, -15,  -8,  -4,  -5, -15, -11,  -8,   6, -10,   1,  -1, -17,
        /*C*/  -6,  -8, -11, -14,  10, -14, -14,  -9,  -7,  -6, -15, -14, -13, -13,  -8,  -3,  -8, -15,  -4,  -6, -12,  -9, -14,  -1, -17,
        /*Q*/  -4,  -2,  -3,  -2, -14,   8,   1,  -7,   1,  -8,  -5,  -3,  -4, -13,  -3,  -5,  -5, -13, -12,  -7,  -3,  -5,   6,  -1, -17,
        /*E*/  -2,  -9,  -2,   2, -14,   1,   8,  -4,  -5,  -5,  -9,  -4,  -7, -14,  -5,  -4,  -6, -17,  -8,  -6,   1,  -7,   6,  -1, -17,
        /*G*/  -2,  -9,  -3,  -3,  -9,  -7,  -4,   6,  -9, -11, -10,  -7,  -8,  -9,  -6,  -2,  -6, -15, -14,  -5,  -3, -10,  -5,  -1, -17,
        /*H*/  -7,  -2,   0,  -4,  -7,   1,  -5,  -9,   9,  -9,  -6,  -6, -10,  -6,  -4,  -6,  -7,  -7,  -3,  -6,  -1,  -7,  -1,  -1, -17,
        /*I*/  -5,  -5,  -5,  -7,  -6,  -8,  -5, -11,  -9,   8,  -1,  -6,  -1,  -2,  -8,  -7,  -2, -14,  -6,   2,  -6,   5,  -6,  -1, -17,
        /*L*/  -6,  -8,  -7, -12, -15,  -5,  -9, -10,  -6,  -1,   7,  -8,   1,  -3,  -7,  -8,  -7,  -6,  -7,  -2,  -9,   6,  -7,  -1, -17,
        /*K*/  -7,   0,  -1,  -4, -14,  -3,  -4,  -7,  -6,  -6,  -8,   7,  -2, -14,  -6,  -4,  -3, -12,  -9,  -9,  -2,  -7,  -4,  -1, -17,
        /*M*/  -5,  -4,  -9, -11, -13,  -4,  -7,  -8, -10,  -1,   1,  -2,  11,  -4,  -8,  -5,  -4, -13, -11,  -1, -10,   0,  -5,  -1, -17,
        /*F*/  -8,  -9,  -9, -15, -13, -13, -14,  -9,  -6,  -2,  -3, -14,  -4,   9, -10,  -6,  -9,  -4,   2,  -8, -10,  -2, -13,  -1, -17,
        /*P*/  -2,  -4,  -6,  -8,  -8,  -3,  -5,  -6,  -4,  -8,  -7,  -6,  -8, -10,   8,  -2,  -4, -14, -13,  -6,  -7,  -7,  -4,  -1, -17,
        /*S*/   0,  -3,   0,  -4,  -3,  -5,  -4,  -2,  -6,  -7,  -8,  -4,  -5,  -6,  -2,   6,   0,  -5,  -7,  -6,  -1,  -8,  -5,  -1, -17,
        /*T*/  -1,  -6,  -2,  -5,  -8,  -5,  -6,  -6,  -7,  -2,  -7,  -3,  -4,  -9,  -4,   0,   7, -13,  -6,  -3,  -3,  -5,  -6,  -1, -17,
        /*W*/ -13,  -2,  -8, -15, -15, -13, -17, -15,  -7, -14,  -6, -12, -13,  -4, -14,  -5, -13,  13,  -5, -15, -10,  -7, -14,  -1, -17,
        /*Y*/  -8, -10,  -4, -11,  -4, -12,  -8, -14,  -3,  -6,  -7,  -9, -11,   2, -13,  -7,  -6,  -5,  10,  -7,  -6,  -7,  -9,  -1, -17,
        /*V*/  -2,  -8,  -8,  -8,  -6,  -7,  -6,  -5,  -6,   2,  -2,  -9,  -1,  -8,  -6,  -6,  -3, -15,  -7,   7,  -8,   0,  -6,  -1, -17,
        /*B*/  -3,  -7,   6,   6, -12,  -3,   1,  -3,  -1,  -6,  -9,  -2, -10, -10,  -7,  -1,  -3, -10,  -6,  -8,   6,  -8,   0,  -1, -17,
        /*J*/  -6,  -7,  -6, -10,  -9,  -5,  -7, -10,  -7,   5,   6,  -7,   0,  -2,  -7,  -8,  -5,  -7,  -7,   0,  -8,   6,  -6,  -1, -17,
        /*Z*/  -3,  -4,  -3,   1, -14,   6,   6,  -5,  -1,  -6,  -7,  -4,  -5, -13,  -4,  -5,  -6, -14,  -9,  -6,   0,  -6,   6,  -1, -17,
        /*X*/  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -17,
        /***/ -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,   1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = PAM30::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = PAM30::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct PAM70{
    static constexpr char low = -11;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/PAM30
        // Entries for the PAM70 matrix at a scale of ln(2)/2.0,.            
        //       A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X    *
        /*A*/    5,  -4,  -2,  -1,  -4,  -2,  -1,   0,  -4,  -2,  -4,  -4,  -3,  -6,   0,   1,   1,  -9,  -5,  -1,  -1,  -3,  -1,  -1, -11,
        /*R*/   -4,   8,  -3,  -6,  -5,   0,  -5,  -6,   0,  -3,  -6,   2,  -2,  -7,  -2,  -1,  -4,   0,  -7,  -5,  -4,  -5,  -2,  -1, -11,
        /*N*/   -2,  -3,   6,   3,  -7,  -1,   0,  -1,   1,  -3,  -5,   0,  -5,  -6,  -3,   1,   0,  -6,  -3,  -5,   5,  -4,  -1,  -1, -11,
        /*D*/   -1,  -6,   3,   6,  -9,   0,   3,  -1,  -1,  -5,  -8,  -2,  -7, -10,  -4,  -1,  -2, -10,  -7,  -5,   5,  -7,   2,  -1, -11,
        /*C*/   -4,  -5,  -7,  -9,   9,  -9,  -9,  -6,  -5,  -4, -10,  -9,  -9,  -8,  -5,  -1,  -5, -11,  -2,  -4,  -8,  -7,  -9,  -1, -11,
        /*Q*/   -2,   0,  -1,   0,  -9,   7,   2,  -4,   2,  -5,  -3,  -1,  -2,  -9,  -1,  -3,  -3,  -8,  -8,  -4,  -1,  -3,   5,  -1, -11,
        /*E*/   -1,  -5,   0,   3,  -9,   2,   6,  -2,  -2,  -4,  -6,  -2,  -4,  -9,  -3,  -2,  -3, -11,  -6,  -4,   2,  -5,   5,  -1, -11,
        /*G*/    0,  -6,  -1,  -1,  -6,  -4,  -2,   6,  -6,  -6,  -7,  -5,  -6,  -7,  -3,   0,  -3, -10,  -9,  -3,  -1,  -7,  -3,  -1, -11,
        /*H*/   -4,   0,   1,  -1,  -5,   2,  -2,  -6,   8,  -6,  -4,  -3,  -6,  -4,  -2,  -3,  -4,  -5,  -1,  -4,   0,  -4,   1,  -1, -11,
        /*I*/   -2,  -3,  -3,  -5,  -4,  -5,  -4,  -6,  -6,   7,   1,  -4,   1,   0,  -5,  -4,  -1,  -9,  -4,   3,  -4,   4,  -4,  -1, -11,
        /*L*/   -4,  -6,  -5,  -8, -10,  -3,  -6,  -7,  -4,   1,   6,  -5,   2,  -1,  -5,  -6,  -4,  -4,  -4,   0,  -6,   5,  -4,  -1, -11,
        /*K*/   -4,   2,   0,  -2,  -9,  -1,  -2,  -5,  -3,  -4,  -5,   6,   0,  -9,  -4,  -2,  -1,  -7,  -7,  -6,  -1,  -5,  -2,  -1, -11,
        /*M*/   -3,  -2,  -5,  -7,  -9,  -2,  -4,  -6,  -6,   1,   2,   0,  10,  -2,  -5,  -3,  -2,  -8,  -7,   0,  -6,   2,  -3,  -1, -11,
        /*F*/   -6,  -7,  -6, -10,  -8,  -9,  -9,  -7,  -4,   0,  -1,  -9,  -2,   8,  -7,  -4,  -6,  -2,   4,  -5,  -7,  -1,  -9,  -1, -11,
        /*P*/    0,  -2,  -3,  -4,  -5,  -1,  -3,  -3,  -2,  -5,  -5,  -4,  -5,  -7,   7,   0,  -2,  -9,  -9,  -3,  -4,  -5,  -2,  -1, -11,
        /*S*/    1,  -1,   1,  -1,  -1,  -3,  -2,   0,  -3,  -4,  -6,  -2,  -3,  -4,   0,   5,   2,  -3,  -5,  -3,   0,  -5,  -2,  -1, -11,
        /*T*/    1,  -4,   0,  -2,  -5,  -3,  -3,  -3,  -4,  -1,  -4,  -1,  -2,  -6,  -2,   2,   6,  -8,  -4,  -1,  -1,  -3,  -3,  -1, -11,
        /*W*/   -9,   0,  -6, -10, -11,  -8, -11, -10,  -5,  -9,  -4,  -7,  -8,  -2,  -9,  -3,  -8,  13,  -3, -10,  -7,  -5, -10,  -1, -11,
        /*Y*/   -5,  -7,  -3,  -7,  -2,  -8,  -6,  -9,  -1,  -4,  -4,  -7,  -7,   4,  -9,  -5,  -4,  -3,   9,  -5,  -4,  -4,  -7,  -1, -11,
        /*V*/   -1,  -5,  -5,  -5,  -4,  -4,  -4,  -3,  -4,   3,   0,  -6,   0,  -5,  -3,  -3,  -1, -10,  -5,   6,  -5,   1,  -4,  -1, -11,
        /*B*/   -1,  -4,   5,   5,  -8,  -1,   2,  -1,   0,  -4,  -6,  -1,  -6,  -7,  -4,   0,  -1,  -7,  -4,  -5,   5,  -5,   1,  -1, -11,
        /*J*/   -3,  -5,  -4,  -7,  -7,  -3,  -5,  -7,  -4,   4,   5,  -5,   2,  -1,  -5,  -5,  -3,  -5,  -4,   1,  -5,   5,  -4,  -1, -11,
        /*Z*/   -1,  -2,  -1,   2,  -9,   5,   5,  -3,   1,  -4,  -4,  -2,  -3,  -9,  -2,  -2,  -3, -10,  -7,  -4,   1,  -4,   5,  -1, -11,
        /*X*/   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -11,
        /***/ -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,   1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = PAM70::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = PAM70::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM45{
    static constexpr char low = -5;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/BLOSUM45    
        // Entries for the BLOSUM45 matrix at a scale of ln(2)/3.0.        
        //      A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
        /*A*/   5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -2, -2,  0, -1, -1, -1, -1, -5,
        /*R*/  -2,  7,  0, -1, -3,  1,  0, -2,  0, -3, -2,  3, -1, -2, -2, -1, -1, -2, -1, -2, -1, -3,  1, -1, -5,
        /*N*/  -1,  0,  6,  2, -2,  0,  0,  0,  1, -2, -3,  0, -2, -2, -2,  1,  0, -4, -2, -3,  5, -3,  0, -1, -5,
        /*D*/  -2, -1,  2,  7, -3,  0,  2, -1,  0, -4, -3,  0, -3, -4, -1,  0, -1, -4, -2, -3,  6, -3,  1, -1, -5,
        /*C*/  -1, -3, -2, -3, 12, -3, -3, -3, -3, -3, -2, -3, -2, -2, -4, -1, -1, -5, -3, -1, -2, -2, -3, -1, -5,
        /*Q*/  -1,  1,  0,  0, -3,  6,  2, -2,  1, -2, -2,  1,  0, -4, -1,  0, -1, -2, -1, -3,  0, -2,  4, -1, -5,
        /*E*/  -1,  0,  0,  2, -3,  2,  6, -2,  0, -3, -2,  1, -2, -3,  0,  0, -1, -3, -2, -3,  1, -3,  5, -1, -5,
        /*G*/   0, -2,  0, -1, -3, -2, -2,  7, -2, -4, -3, -2, -2, -3, -2,  0, -2, -2, -3, -3, -1, -4, -2, -1, -5,
        /*H*/  -2,  0,  1,  0, -3,  1,  0, -2, 10, -3, -2, -1,  0, -2, -2, -1, -2, -3,  2, -3,  0, -2,  0, -1, -5,
        /*I*/  -1, -3, -2, -4, -3, -2, -3, -4, -3,  5,  2, -3,  2,  0, -2, -2, -1, -2,  0,  3, -3,  4, -3, -1, -5,
        /*L*/  -1, -2, -3, -3, -2, -2, -2, -3, -2,  2,  5, -3,  2,  1, -3, -3, -1, -2,  0,  1, -3,  4, -2, -1, -5,
        /*K*/  -1,  3,  0,  0, -3,  1,  1, -2, -1, -3, -3,  5, -1, -3, -1, -1, -1, -2, -1, -2,  0, -3,  1, -1, -5,
        /*M*/  -1, -1, -2, -3, -2,  0, -2, -2,  0,  2,  2, -1,  6,  0, -2, -2, -1, -2,  0,  1, -2,  2, -1, -1, -5,
        /*F*/  -2, -2, -2, -4, -2, -4, -3, -3, -2,  0,  1, -3,  0,  8, -3, -2, -1,  1,  3,  0, -3,  1, -3, -1, -5,
        /*P*/  -1, -2, -2, -1, -4, -1,  0, -2, -2, -2, -3, -1, -2, -3,  9, -1, -1, -3, -3, -3, -2, -3, -1, -1, -5,
        /*S*/   1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -3, -1, -2, -2, -1,  4,  2, -4, -2, -1,  0, -2,  0, -1, -5,
        /*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1,  2,  5, -3, -1,  0,  0, -1, -1, -1, -5,
        /*W*/  -2, -2, -4, -4, -5, -2, -3, -2, -3, -2, -2, -2, -2,  1, -3, -4, -3, 15,  3, -3, -4, -2, -2, -1, -5,
        /*Y*/  -2, -1, -2, -2, -3, -1, -2, -3,  2,  0,  0, -1,  0,  3, -3, -2, -1,  3,  8, -1, -2,  0, -2, -1, -5,
        /*V*/   0, -2, -3, -3, -1, -3, -3, -3, -3,  3,  1, -2,  1,  0, -3, -1,  0, -3, -1,  5, -3,  2, -3, -1, -5,
        /*B*/  -1, -1,  5,  6, -2,  0,  1, -1,  0, -3, -3,  0, -2, -3, -2,  0,  0, -4, -2, -3,  5, -3,  1, -1, -5,
        /*J*/  -1, -3, -3, -3, -2, -2, -3, -4, -2,  4,  4, -3,  2,  1, -3, -2, -1, -2,  0,  2, -3,  4, -2, -1, -5,
        /*Z*/  -1,  1,  0,  1, -3,  4,  5, -2,  0, -3, -2,  1, -1, -3, -1,  0, -1, -2, -2, -3,  1, -2,  5, -1, -5,
        /*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5,
        /***/  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM45::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM45::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM50{
    static constexpr char low = -5;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/BLOSUM50
        // Entries for the BLOSUM50 matrix at a scale of ln(2)/3.0.            
        //      A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
        /*A*/   5, -2, -1, -2, -1, -1, -1,  0, -2, -1, -2, -1, -1, -3, -1,  1,  0, -3, -2,  0, -2, -2, -1, -1, -5,
        /*R*/  -2,  7, -1, -2, -4,  1,  0, -3,  0, -4, -3,  3, -2, -3, -3, -1, -1, -3, -1, -3, -1, -3,  0, -1, -5,
        /*N*/  -1, -1,  7,  2, -2,  0,  0,  0,  1, -3, -4,  0, -2, -4, -2,  1,  0, -4, -2, -3,  5, -4,  0, -1, -5,
        /*D*/  -2, -2,  2,  8, -4,  0,  2, -1, -1, -4, -4, -1, -4, -5, -1,  0, -1, -5, -3, -4,  6, -4,  1, -1, -5,
        /*C*/  -1, -4, -2, -4, 13, -3, -3, -3, -3, -2, -2, -3, -2, -2, -4, -1, -1, -5, -3, -1, -3, -2, -3, -1, -5,
        /*Q*/  -1,  1,  0,  0, -3,  7,  2, -2,  1, -3, -2,  2,  0, -4, -1,  0, -1, -1, -1, -3,  0, -3,  4, -1, -5,
        /*E*/  -1,  0,  0,  2, -3,  2,  6, -3,  0, -4, -3,  1, -2, -3, -1, -1, -1, -3, -2, -3,  1, -3,  5, -1, -5,
        /*G*/   0, -3,  0, -1, -3, -2, -3,  8, -2, -4, -4, -2, -3, -4, -2,  0, -2, -3, -3, -4, -1, -4, -2, -1, -5,
        /*H*/  -2,  0,  1, -1, -3,  1,  0, -2, 10, -4, -3,  0, -1, -1, -2, -1, -2, -3,  2, -4,  0, -3,  0, -1, -5,
        /*I*/  -1, -4, -3, -4, -2, -3, -4, -4, -4,  5,  2, -3,  2,  0, -3, -3, -1, -3, -1,  4, -4,  4, -3, -1, -5,
        /*L*/  -2, -3, -4, -4, -2, -2, -3, -4, -3,  2,  5, -3,  3,  1, -4, -3, -1, -2, -1,  1, -4,  4, -3, -1, -5,
        /*K*/  -1,  3,  0, -1, -3,  2,  1, -2,  0, -3, -3,  6, -2, -4, -1,  0, -1, -3, -2, -3,  0, -3,  1, -1, -5,
        /*M*/  -1, -2, -2, -4, -2,  0, -2, -3, -1,  2,  3, -2,  7,  0, -3, -2, -1, -1,  0,  1, -3,  2, -1, -1, -5,
        /*F*/  -3, -3, -4, -5, -2, -4, -3, -4, -1,  0,  1, -4,  0,  8, -4, -3, -2,  1,  4, -1, -4,  1, -4, -1, -5,
        /*P*/  -1, -3, -2, -1, -4, -1, -1, -2, -2, -3, -4, -1, -3, -4, 10, -1, -1, -4, -3, -3, -2, -3, -1, -1, -5,
        /*S*/   1, -1,  1,  0, -1,  0, -1,  0, -1, -3, -3,  0, -2, -3, -1,  5,  2, -4, -2, -2,  0, -3,  0, -1, -5,
        /*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  2,  5, -3, -2,  0,  0, -1, -1, -1, -5,
        /*W*/  -3, -3, -4, -5, -5, -1, -3, -3, -3, -3, -2, -3, -1,  1, -4, -4, -3, 15,  2, -3, -5, -2, -2, -1, -5,
        /*Y*/  -2, -1, -2, -3, -3, -1, -2, -3,  2, -1, -1, -2,  0,  4, -3, -2, -2,  2,  8, -1, -3, -1, -2, -1, -5,
        /*V*/   0, -3, -3, -4, -1, -3, -3, -4, -4,  4,  1, -3,  1, -1, -3, -2,  0, -3, -1,  5, -3,  2, -3, -1, -5,
        /*B*/  -2, -1,  5,  6, -3,  0,  1, -1,  0, -4, -4,  0, -3, -4, -2,  0,  0, -5, -3, -3,  6, -4,  1, -1, -5,
        /*J*/  -2, -3, -4, -4, -2, -3, -3, -4, -3,  4,  4, -3,  2,  1, -3, -3, -1, -2, -1,  2, -4,  4, -3, -1, -5,
        /*Z*/  -1,  0,  0,  1, -3,  4,  5, -2,  0, -3, -3,  1, -1, -4, -1,  0, -1, -2, -2, -3,  1, -3,  5, -1, -5,
        /*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5,
        /***/  -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM50::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM50::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM62{
    static constexpr char low = -4;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/BLOSUM62
        // Entries for the BLOSUM62 matrix at a scale of ln(2)/2.0.               
        //      A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
        /*A*/   4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1, -1, -1, -4,
        /*R*/  -1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1, -2,  0, -1, -4,
        /*N*/  -2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  4, -3,  0, -1, -4,
        /*D*/  -2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4, -3,  1, -1, -4,
        /*C*/   0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -1, -3, -1, -4,
        /*Q*/  -1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0, -2,  4, -1, -4,
        /*E*/  -1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1, -3,  4, -1, -4,
        /*G*/   0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -4, -2, -1, -4,
        /*H*/  -2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0, -3,  0, -1, -4,
        /*I*/  -1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3,  3, -3, -1, -4,
        /*L*/  -1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4,  3, -3, -1, -4,
        /*K*/  -1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0, -3,  1, -1, -4,
        /*M*/  -1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3,  2, -1, -1, -4,
        /*F*/  -2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3,  0, -3, -1, -4,
        /*P*/  -1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -3, -1, -1, -4,
        /*S*/   1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0, -2,  0, -1, -4,
        /*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1, -1, -1, -4,
        /*W*/  -3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -2, -2, -1, -4,
        /*Y*/  -2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -1, -2, -1, -4,
        /*V*/   0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3,  2, -2, -1, -4,
        /*B*/  -2, -1,  4,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4, -3,  0, -1, -4,
        /*J*/  -1, -2, -3, -3, -1, -2, -3, -4, -3,  3,  3, -3,  2,  0, -3, -2, -1, -2, -1,  2, -3,  3, -3, -1, -4,
        /*Z*/  -1,  0,  0,  1, -3,  4,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -2, -2, -2,  0, -3,  4, -1, -4,
        /*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -4,
        /***/  -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM62::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM62::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct BLOSUM80{
    static constexpr char low = -6;
    static constexpr int dim = 25;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        // https://www.ncbi.nlm.nih.gov/IEB/ToolBox/C_DOC/lxr/source/data/BLOSUM80
        // Entries for the BLOSUM80 matrix at a scale of ln(2)/2.0.                  
        //      A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
        /*A*/   5, -2, -2, -2, -1, -1, -1,  0, -2, -2, -2, -1, -1, -3, -1,  1,  0, -3, -2,  0, -2, -2, -1, -1, -6,
        /*R*/  -2,  6, -1, -2, -4,  1, -1, -3,  0, -3, -3,  2, -2, -4, -2, -1, -1, -4, -3, -3, -1, -3,  0, -1, -6,
        /*N*/  -2, -1,  6,  1, -3,  0, -1, -1,  0, -4, -4,  0, -3, -4, -3,  0,  0, -4, -3, -4,  5, -4,  0, -1, -6,
        /*D*/  -2, -2,  1,  6, -4, -1,  1, -2, -2, -4, -5, -1, -4, -4, -2, -1, -1, -6, -4, -4,  5, -5,  1, -1, -6,
        /*C*/  -1, -4, -3, -4,  9, -4, -5, -4, -4, -2, -2, -4, -2, -3, -4, -2, -1, -3, -3, -1, -4, -2, -4, -1, -6,
        /*Q*/  -1,  1,  0, -1, -4,  6,  2, -2,  1, -3, -3,  1,  0, -4, -2,  0, -1, -3, -2, -3,  0, -3,  4, -1, -6,
        /*E*/  -1, -1, -1,  1, -5,  2,  6, -3,  0, -4, -4,  1, -2, -4, -2,  0, -1, -4, -3, -3,  1, -4,  5, -1, -6,
        /*G*/   0, -3, -1, -2, -4, -2, -3,  6, -3, -5, -4, -2, -4, -4, -3, -1, -2, -4, -4, -4, -1, -5, -3, -1, -6,
        /*H*/  -2,  0,  0, -2, -4,  1,  0, -3,  8, -4, -3, -1, -2, -2, -3, -1, -2, -3,  2, -4, -1, -4,  0, -1, -6,
        /*I*/  -2, -3, -4, -4, -2, -3, -4, -5, -4,  5,  1, -3,  1, -1, -4, -3, -1, -3, -2,  3, -4,  3, -4, -1, -6,
        /*L*/  -2, -3, -4, -5, -2, -3, -4, -4, -3,  1,  4, -3,  2,  0, -3, -3, -2, -2, -2,  1, -4,  3, -3, -1, -6,
        /*K*/  -1,  2,  0, -1, -4,  1,  1, -2, -1, -3, -3,  5, -2, -4, -1, -1, -1, -4, -3, -3, -1, -3,  1, -1, -6,
        /*M*/  -1, -2, -3, -4, -2,  0, -2, -4, -2,  1,  2, -2,  6,  0, -3, -2, -1, -2, -2,  1, -3,  2, -1, -1, -6,
        /*F*/  -3, -4, -4, -4, -3, -4, -4, -4, -2, -1,  0, -4,  0,  6, -4, -3, -2,  0,  3, -1, -4,  0, -4, -1, -6,
        /*P*/  -1, -2, -3, -2, -4, -2, -2, -3, -3, -4, -3, -1, -3, -4,  8, -1, -2, -5, -4, -3, -2, -4, -2, -1, -6,
        /*S*/   1, -1,  0, -1, -2,  0,  0, -1, -1, -3, -3, -1, -2, -3, -1,  5,  1, -4, -2, -2,  0, -3,  0, -1, -6,
        /*T*/   0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -2, -1, -1, -2, -2,  1,  5, -4, -2,  0, -1, -1, -1, -1, -6,
        /*W*/  -3, -4, -4, -6, -3, -3, -4, -4, -3, -3, -2, -4, -2,  0, -5, -4, -4, 11,  2, -3, -5, -3, -3, -1, -6,
        /*Y*/  -2, -3, -3, -4, -3, -2, -3, -4,  2, -2, -2, -3, -2,  3, -4, -2, -2,  2,  7, -2, -3, -2, -3, -1, -6,
        /*V*/   0, -3, -4, -4, -1, -3, -3, -4, -4,  3,  1, -3,  1, -1, -3, -2,  0, -3, -2,  4, -4,  2, -3, -1, -6,
        /*B*/  -2, -1,  5,  5, -4,  0,  1, -1, -1, -4, -4, -1, -3, -4, -2,  0, -1, -5, -3, -4,  5, -4,  0, -1, -6,
        /*J*/  -2, -3, -4, -5, -2, -3, -4, -5, -4,  3,  3, -3,  2,  0, -4, -3, -1, -3, -2,  2, -4,  3, -3, -1, -6,
        /*Z*/  -1,  0,  0,  1, -4,  4,  5, -3,  0, -4, -3,  1, -1, -4, -2,  0, -1, -3, -3, -3,  0, -3,  5, -1, -6,
        /*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6,
        /***/  -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = BLOSUM80::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = BLOSUM80::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

struct DNA{
    static constexpr char low = -4;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        //      A   C   G   T   U   R   Y   M   W   S   K   D   H   V   B   N   X 
        /*A*/   5, -4, -4, -4, -4,  2, -1,  2,  2, -1, -1,  1,  1,  1, -2, -1, -1,  0,  0,  0,  0,
        /*C*/  -4,  5, -4, -4, -4, -1,  2,  2, -1,  2, -1, -2,  1,  1,  1, -1, -1,  0,  0,  0,  0,
        /*G*/  -4, -4,  5, -4, -4,  2, -1, -1, -1,  2,  2,  1, -2,  1,  1, -1, -1,  0,  0,  0,  0,
        /*T*/  -4, -4, -4,  5,  5, -1,  2, -1,  2, -1,  2,  1,  1, -2,  1, -1, -1,  0,  0,  0,  0,
        /*U*/  -4, -4, -4,  5,  5, -1,  2, -1,  2, -1,  2,  1,  1, -2,  1, -1, -1,  0,  0,  0,  0,
        /*R*/   2, -1,  2, -1, -1,  2, -2, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  0,  0,  0,  0,
        /*Y*/  -1,  2, -1,  2,  2, -2,  2, -1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  0,  0,  0,  0,
        /*M*/   2,  2, -1, -1, -1, -1, -1,  2,  1,  1, -1, -1,  1,  1, -1, -1, -1,  0,  0,  0,  0,
        /*W*/   2, -1, -1,  2,  2,  1,  1,  1,  2, -1,  1,  1,  1, -1, -1, -1, -1,  0,  0,  0,  0,
        /*S*/  -1,  2,  2, -1, -1,  1,  1,  1, -1,  2,  1, -1, -1,  1,  1, -1, -1,  0,  0,  0,  0,
        /*K*/  -1, -1,  2,  2,  2,  1,  1, -1,  1,  1,  2,  1, -1, -1,  1, -1, -1,  0,  0,  0,  0,
        /*D*/   1, -2,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1, -1, -1, -1, -1, -1,  0,  0,  0,  0,
        /*H*/   1,  1, -2,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1,  0,  0,  0,  0,
        /*V*/   1,  1,  1, -2, -2,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  0,  0,  0,  0,
        /*B*/  -2,  1,  1,  1,  1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  0,  0,  0,  0,
        /*N*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,
        /*X*/  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = DNA::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = DNA::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }        
};

struct NUC44{
    static constexpr char low = -4;
    static constexpr int dim = 21;

    static constexpr std::array<char, dim*dim> get1D() {
        return  {
        //      A   C   G   T   U   R   Y   M   W   S   K   D   H   V   B   N   X
        /*A*/   5, -4, -4, -4, -4,  1, -4,  1,  1, -4, -4, -1, -1, -1, -4, -2, -2,  0,  0,  0,  0,
        /*C*/  -4,  5, -4, -4, -4, -4,  1,  1, -4,  1, -4, -4, -1, -1, -1, -2, -2,  0,  0,  0,  0,
        /*G*/  -4, -4,  5, -4, -4,  1, -4, -4, -4,  1,  1, -1, -4, -1, -1, -2, -2,  0,  0,  0,  0,
        /*T*/  -4, -4, -4,  5,  5, -4,  1, -4,  1, -4,  1, -1, -1, -4, -1, -2, -2,  0,  0,  0,  0,
        /*U*/  -4, -4, -4,  5,  5, -4,  1, -4,  1, -4,  1, -1, -1, -4, -1, -2, -2,  0,  0,  0,  0,
        /*R*/   1, -4,  1, -4, -4, -1, -4, -2, -2, -2, -2, -1, -3, -1, -3, -1, -1,  0,  0,  0,  0,
        /*Y*/  -4,  1, -4,  1,  1, -4, -1, -2, -2, -2, -2, -3, -1, -3, -1, -1, -1,  0,  0,  0,  0,
        /*M*/   1,  1, -4, -4, -4, -2, -2, -1, -2, -2, -4, -3, -1, -1, -3, -1, -1,  0,  0,  0,  0,
        /*W*/   1, -4, -4,  1,  1, -2, -2, -2, -1, -4, -2, -1, -1, -3, -3, -1, -1,  0,  0,  0,  0,
        /*S*/  -4,  1,  1, -4, -4, -2, -2, -2, -4, -1, -2, -3, -3, -1, -1, -1, -1,  0,  0,  0,  0,
        /*K*/  -4, -4,  1,  1,  1, -2, -2, -4, -2, -2, -1, -1, -3, -3, -1, -1, -1,  0,  0,  0,  0,
        /*D*/  -1, -4, -1, -1, -1, -1, -3, -3, -1, -3, -1, -1, -2, -2, -2, -1, -1,  0,  0,  0,  0,
        /*H*/  -1, -1, -4, -1, -1, -3, -1, -1, -1, -3, -3, -2, -1, -2, -2, -1, -1,  0,  0,  0,  0,
        /*V*/  -1, -1, -1, -4, -4, -1, -3, -1, -3, -1, -3, -2, -2, -1, -2, -1, -1,  0,  0,  0,  0,
        /*B*/  -4, -1, -1, -1, -1, -3, -1, -3, -3, -1, -1, -2, -2, -2, -1, -1, -1,  0,  0,  0,  0,
        /*N*/  -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,
        /*X*/  -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
                0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        };
    }

    static std::array<std::array<char, dim>, dim> get2D() {
        auto flat = NUC44::get1D();
        std::array<std::array<char, dim>, dim> result{};
        for(int y = 0; y < dim; y++) {
            for(int x = 0; x < dim; x++) {
                result[y][x] = flat[y * dim + x];
            }
        }
        return result;
    }

    static std::array<std::array<int, 32>, 32> get32() {
        auto flat = NUC44::get1D();
        std::array<std::array<int, 32>, 32> result{0};
        for(size_t y = 0; y < dim; y++) {
            for(size_t x = 0; x < dim; x++) {
                result[y][x] = (int)flat[y * dim + x];
            }
        }
        return result;
    }   
};

} //namespace cudasw4

__inline__
std::string to_string(cudasw4::SequenceType type){
    switch(type){
        case cudasw4::SequenceType::Nucleotide: return "Nucleotide"; break;
        case cudasw4::SequenceType::Protein: return "Protein"; break;
        default: return "Missing name for SequenceType";
    }
}

__inline__
std::string to_string(cudasw4::KernelType type){
    switch(type){
        case cudasw4::KernelType::Half2: return "Half2"; break;
        case cudasw4::KernelType::DPXs16: return "DPXs16"; break;
        case cudasw4::KernelType::DPXs32: return "DPXs32"; break;
        case cudasw4::KernelType::Float: return "Float"; break;
        default: return "Missing name for KernelType";
    }
}

__inline__
std::string to_string(cudasw4::SubMatrixType type){
    switch(type){
        case cudasw4::SubMatrixType::DNA: return "DNA";
        case cudasw4::SubMatrixType::NUC44: return "NUC44";
        case cudasw4::SubMatrixType::PAM30: return "PAM30";
        case cudasw4::SubMatrixType::PAM70: return "PAM70";
        case cudasw4::SubMatrixType::BLOSUM45: return "BLOSUM45";
        case cudasw4::SubMatrixType::BLOSUM50: return "BLOSUM50";
        case cudasw4::SubMatrixType::BLOSUM62: return "BLOSUM62";
        case cudasw4::SubMatrixType::BLOSUM80: return "BLOSUM80";
        case cudasw4::SubMatrixType::PAM30_20: return "PAM30 (20)";
        case cudasw4::SubMatrixType::PAM70_20: return "PAM70 (20)";
        case cudasw4::SubMatrixType::BLOSUM45_20: return "BLOSUM45 (20)";
        case cudasw4::SubMatrixType::BLOSUM50_20: return "BLOSUM50 (20)";
        case cudasw4::SubMatrixType::BLOSUM62_20: return "BLOSUM62 (20)";
        case cudasw4::SubMatrixType::BLOSUM80_20: return "BLOSUM80 (20)";
        default: return "FORGOT TO NAME THIS MATRIX TYPE";
    }
}

__inline__
std::string to_string_nodim(cudasw4::SubMatrixType type){
    switch(type){
        case cudasw4::SubMatrixType::DNA: return "DNA";
        case cudasw4::SubMatrixType::NUC44: return "NUC44";
        case cudasw4::SubMatrixType::PAM30: return "PAM30";
        case cudasw4::SubMatrixType::PAM70: return "PAM70";
        case cudasw4::SubMatrixType::BLOSUM45: return "BLOSUM45";
        case cudasw4::SubMatrixType::BLOSUM50: return "BLOSUM50";
        case cudasw4::SubMatrixType::BLOSUM62: return "BLOSUM62";
        case cudasw4::SubMatrixType::BLOSUM80: return "BLOSUM80";
        case cudasw4::SubMatrixType::PAM30_20: return "PAM30";
        case cudasw4::SubMatrixType::PAM70_20: return "PAM70";
        case cudasw4::SubMatrixType::BLOSUM45_20: return "BLOSUM45";
        case cudasw4::SubMatrixType::BLOSUM50_20: return "BLOSUM50";
        case cudasw4::SubMatrixType::BLOSUM62_20: return "BLOSUM62";
        case cudasw4::SubMatrixType::BLOSUM80_20: return "BLOSUM80";
        default: return "FORGOT TO NAME THIS MATRIX TYPE";
    }
}


#endif
